Micro.VisualStudio.Web.CodeGeneration.Design

Micro.EntityFramework
Micro.EntityFramework.sqlserver
>>Microsoft.EntityFrameworkCore.Tools.dotNet


<ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="7.0.3"/>
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.4.0"/>
    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="6.0.0"/>
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="6.0.0"/>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="6.0.0"/>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools.DotNet" Version="2.0.1"/>
  </ItemGroup>


dotnet tool install --global dotnet-aspnet-codegenerator --version 6


















[Authorize]
        [HttpPost]
        public IActionResult Cadastrar(Usuario usuario)
        {
            try
            {
                _IUsuarioRepository.Cadastrar(usuario); // vai na interface e acessa o método cadastrar e cadastra um objeto do tipo usaurio
                return StatusCode(201);
            }
            catch (System.Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }





builder.Services.AddCors(options =>
{
options.AddPolicy("CorsPolicy", builder => {
    builder.WithOrigins("http://localhost:5128")
    .AllowAnyHeader()
    .AllowAnyMethod();
});
});


----------------Swagger-----------------------

Packs : 
Swagger
AddSwaggerGen
UseSwaggerUI

Importações a serem feitas na program : 


using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.OpenApi.Models;


Configuração do Swagger : 



builder.Services.AddSwaggerGen( c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo{

       Title = "ChapterApi",
       Version 
       = "v1"

    });
}
);





1 - ADICIONAR UM CONTROLADOR

Os controladores derivam de uma classe base do controler. 
COntrolador especifico de api.

>>>>> dotnet aspnet-codegenerator  controller -name LivrosController -api -outDir Controllers


2 - Em Models colocamos A entidade e suas propiedades(Tabelas);

3 - Após a classses Criadas e COnfiguradas, em programam >>> builder.Services.AddTransient<LivrosRepository, LivrosRepository>();

>>> builder.Services.AddScoped<ChapterContext, ChapterContext>();

>>>>>>> app.UseEndpoints( endpoints => 
{endpoints.MapControllers();
});
///////***********RESTRIÇÃO DE ACESSO COM JWT*********\\\\\\\\\\\\\


Adicionar pacote do Bearer 

jwt bearer , aspnet jwt

Criação da entidade Usuario no Model. 









 //Post
        [HttpPost]
        public IActionResult Post(Usuario usuario)
        {
            Usuario UsuarioBuscado = _IUsuarioRepository.Login(usuario.Email, usuario.Senha);
            if (UsuarioBuscado == null)
            {
                return NotFound("Email ou Senha invalido");

            }
            //Se o usuario foe encontrado, Segue coma criação do token

            //Define os dados que serão fornecidos no token - payload

            var claims = new[]
            {
            //Armazena na claim o email usario autenticado
            new Claim (JwtRegisteredClaimNames.Email, UsuarioBuscado.Email),

            //Armazena na claim o id do usuario autenticado 

            new Claim (JwtRegisteredClaimNames.Jti, UsuarioBuscado.id.ToString()),
        };

            // define a chave de acesso ao token 
            var key = new SymmetricSecurityKey(System.Text.Encoding.UTF8.GetBytes("chapterapi-chave-autenticacao"));


            //Define as credencias do token
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(
                issuer: "chapterapi.webapi", //emissor do token
                audience: "chapterapi.webapi", // destinatario do token
                claims: claims,
                expires: DateTime.Now.AddMinutes(30), //Tempo de expiração
                signingCredentials: creds
            );

            //Retorna ok com o token
            return Ok(
                new { token = new JwtSecurityTokenHandler().WriteToken(token) }
            );
        }